-- FUNCIONES

-- Creo una función que devuelve la fecha de apertura del usuario (según su id)

DELIMITER //

CREATE FUNCTION obtenerFechaApertura(p_id_usuario INT) RETURNS DATE READS SQL DATA
BEGIN
    DECLARE v_fecha_apertura DATE;

    SELECT fecha_apertura INTO v_fecha_apertura FROM usuarios WHERE id_usuario = p_id_usuario;

    RETURN v_fecha_apertura;
END //

DELIMITER ;

SELECT obtenerFechaApertura(5);


-- Creo una función que devuelva el nombre del corredor

DELIMITER //

CREATE FUNCTION obtenerNombreCorredor(p_id_corredor INT) RETURNS VARCHAR(100) READS SQL DATA
BEGIN
    DECLARE v_nombre_corredor VARCHAR(100);

    SELECT nombre INTO v_nombre_corredor FROM corredores WHERE id_corredor = p_id_corredor;

    RETURN v_nombre_corredor;
END //

DELIMITER ;

SELECT obtenerNombreCorredor(20);









--STORED 




-- Stored Procedure: OrdenarTabla
-- Ordeno la tabla DatosMercado según el precio ascendente del dólar MEP (pr_MEP)

DELIMITER //

CREATE PROCEDURE OrdenarTabla(p_tabla VARCHAR(100), p_campo VARCHAR(100), p_orden VARCHAR(4))
BEGIN
    SET @sql = CONCAT('SELECT * FROM ', p_tabla, ' ORDER BY ', p_campo, ' ', p_orden);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

DELIMITER ;

CALL OrdenarTabla('DatosMercado', 'pr_MEP', 'ASC');



-- Stored Procedure: InsertarEliminarRegistro
-- Descripción: Permite insertar o eliminar registros en una tabla.
-- Parámetros:
--    - p_opcion: La opción deseada (1 para insertar, 2 para eliminar).
--    - p_condicion: La condición para eliminar registros en caso de la opción 2.
DELIMITER //

CREATE PROCEDURE InsertarEliminarRegistro(p_opcion INT, p_tabla VARCHAR(100), p_valores VARCHAR(255), p_condicion VARCHAR(255))
BEGIN
    IF p_opcion = 1 THEN
        SET @sql = CONCAT('INSERT INTO ', p_tabla, ' VALUES (', p_valores, ')');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    ELSEIF p_opcion = 2 THEN
        SET @sql = CONCAT('DELETE FROM ', p_tabla, ' WHERE ', p_condicion);
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END IF;
END //

DELIMITER ;

CALL InsertarEliminarRegistro(2, 'datosmercado', '', 'pr_bonos > 700')













--TRIGGERS

-- Creo la tabla LogUsuarios para registrar eventos relacionados con estos. 
-- El trigger AFTER INSERT se activará después de realizar una operación de inserción en la tabla "Usuarios". 
-- Dentro del trigger, se inserta un nuevo registro en la tabla "LogUsuarios" utilizando la información del nuevo usuario insertado. 
-- Se captura el id_usuario, el evento realizado ('Inserción de usuario') y la fecha actual (utilizando la función CURDATE()).

CREATE TABLE LogUsuarios (
    id_log INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT,
    evento VARCHAR(255),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_usuario) REFERENCES Usuarios(id_usuario)
);



-- Trigger BEFORE en "Usuarios"
-- Se establece la fecha de apertura del usuario como la fecha actual si no se proporciona. 

DELIMITER //
CREATE TRIGGER trigger_before_insert_usuarios
BEFORE INSERT ON Usuarios
FOR EACH ROW
BEGIN
    -- Acción previa a la inserción de datos de un usuario
    
    -- Establece la fecha de apertura como la fecha actual si no se proporciona
    IF NEW.fecha_apertura IS NULL THEN
        SET NEW.fecha_apertura = CURDATE();
    END IF;
END//
DELIMITER ;

INSERT INTO Usuarios (nombre, mail) VALUES ('John Doe', 'john.doe@example.com');


-- Trigger AFTER en "Usuarios"
-- Registra el evento de inserción de un usuario en la tabla de log "LogUsuarios" después de que se haya insertado un nuevo registro en la tabla "Usuarios"

DELIMITER //
CREATE TRIGGER trigger_after_insert_usuarios
AFTER INSERT ON Usuarios
FOR EACH ROW
BEGIN
    -- Acción posterior a la inserción de datos de un usuario
    
    -- Registro el evento de inserción en un registro de log
    INSERT INTO LogUsuarios (id_usuario, evento, fecha) VALUES (NEW.id_usuario, 'Inserción de usuario', NOW());
END//
DELIMITER ;

INSERT INTO Usuarios (nombre, mail) VALUES ('Jane Smith', 'jane.smith@example.com');



-- TRIGGERS en DatosMercado

-- Trigger BEFORE INSERT en "DatosMercado"

DELIMITER //
CREATE TRIGGER trigger_before_insert_datosmercado
BEFORE INSERT ON DatosMercado
FOR EACH ROW
BEGIN
    -- Verifica que el usuario y corredor existan en las tablas relacionadas
    IF NOT EXISTS (SELECT * FROM Usuarios WHERE id_usuario = NEW.id_usuario) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El usuario no existe.';
    END IF;
    
    IF NOT EXISTS (SELECT * FROM Corredores WHERE id_corredor = NEW.id_corredor) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El corredor no existe.';
    END IF;
END//
DELIMITER ;

-- Con Usuario y corredor existentes
INSERT INTO DatosMercado (id_usuario, id_corredor, pr_MEP, pr_acciones, pr_bonos) VALUES (1, 1, 100, 200, 300);

-- Con Usuario inexistente
INSERT INTO DatosMercado (id_usuario, id_corredor, pr_MEP, pr_acciones, pr_bonos) VALUES (999, 1, 100, 200, 300);

-- Con Corredor inexistente
INSERT INTO DatosMercado (id_usuario, id_corredor, pr_MEP, pr_acciones, pr_bonos) VALUES (1, 999, 100, 200, 300);


-- Se verifica si el usuario (id_usuario) y el corredor (id_corredor) existen en las tablas relacionadas ("Usuarios" y "Corredores", respectivamente). 
-- Si alguno de ellos no existe, se generará una señal de error SQLSTATE '45000' con un mensaje de error personalizado.




-- Trigger AFTER UPDATE en "DatosMercado"

DELIMITER //
CREATE TRIGGER trigger_after_update_datosmercado
AFTER UPDATE ON DatosMercado
FOR EACH ROW
BEGIN
    -- Actualiza una columna en la tabla "Usuarios" después de una actualización en "DatosMercado"
    UPDATE Usuarios SET fecha_ultima_actualizacion = NOW() WHERE id_usuario = NEW.id_usuario;
END//
DELIMITER ;

-- Se establece la fecha y hora actual (utilizando NOW()) como la nueva fecha de última actualización.


UPDATE DatosMercado SET pr_MEP = 150 WHERE id_inst_usuario = 1;




